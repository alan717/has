// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MAGIC_CODE_RESPONSE.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_proto_2fMAGIC_5fCODE_5fRESPONSE_2eproto() {
  delete MAGIC_CODE_RESPONSE::default_instance_;
}

void protobuf_AddDesc_proto_2fMAGIC_5fCODE_5fRESPONSE_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  MAGIC_CODE_RESPONSE::default_instance_ = new MAGIC_CODE_RESPONSE();
  MAGIC_CODE_RESPONSE::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fMAGIC_5fCODE_5fRESPONSE_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fMAGIC_5fCODE_5fRESPONSE_2eproto {
  StaticDescriptorInitializer_proto_2fMAGIC_5fCODE_5fRESPONSE_2eproto() {
    protobuf_AddDesc_proto_2fMAGIC_5fCODE_5fRESPONSE_2eproto();
  }
} static_descriptor_initializer_proto_2fMAGIC_5fCODE_5fRESPONSE_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int MAGIC_CODE_RESPONSE::kPsudoRandomNumberFieldNumber;
const int MAGIC_CODE_RESPONSE::kFeatureUnlockFieldNumber;
const int MAGIC_CODE_RESPONSE::kMachineUnlockFieldNumber;
const int MAGIC_CODE_RESPONSE::kMagicTypeFieldNumber;
const int MAGIC_CODE_RESPONSE::kDaysPurchasedFieldNumber;
const int MAGIC_CODE_RESPONSE::kSpindleMaxSpeedFieldNumber;
const int MAGIC_CODE_RESPONSE::kMaxMemoryFieldNumber;
const int MAGIC_CODE_RESPONSE::kLtSpindleMaxSpeedFieldNumber;
const int MAGIC_CODE_RESPONSE::kSubSpindleMaxSpeedFieldNumber;
const int MAGIC_CODE_RESPONSE::kDuplicateValuesFieldNumber;
#endif  // !_MSC_VER

MAGIC_CODE_RESPONSE::MAGIC_CODE_RESPONSE()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MAGIC_CODE_RESPONSE::InitAsDefaultInstance() {
}

MAGIC_CODE_RESPONSE::MAGIC_CODE_RESPONSE(const MAGIC_CODE_RESPONSE& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MAGIC_CODE_RESPONSE::SharedCtor() {
  _cached_size_ = 0;
  psudorandomnumber_ = GOOGLE_LONGLONG(0);
  featureunlock__ = false;
  machineunlock__ = false;
  magictype__ = 0;
  dayspurchased__ = 0;
  spindlemaxspeed__ = GOOGLE_LONGLONG(0);
  maxmemory__ = 0;
  ltspindlemaxspeed__ = 0;
  subspindlemaxspeed__ = 0;
  duplicatevalues__ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MAGIC_CODE_RESPONSE::~MAGIC_CODE_RESPONSE() {
  SharedDtor();
}

void MAGIC_CODE_RESPONSE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MAGIC_CODE_RESPONSE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MAGIC_CODE_RESPONSE& MAGIC_CODE_RESPONSE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fMAGIC_5fCODE_5fRESPONSE_2eproto();  return *default_instance_;
}

MAGIC_CODE_RESPONSE* MAGIC_CODE_RESPONSE::default_instance_ = NULL;

MAGIC_CODE_RESPONSE* MAGIC_CODE_RESPONSE::New() const {
  return new MAGIC_CODE_RESPONSE;
}

void MAGIC_CODE_RESPONSE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    psudorandomnumber_ = GOOGLE_LONGLONG(0);
    featureunlock__ = false;
    machineunlock__ = false;
    magictype__ = 0;
    dayspurchased__ = 0;
    spindlemaxspeed__ = GOOGLE_LONGLONG(0);
    maxmemory__ = 0;
    ltspindlemaxspeed__ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    subspindlemaxspeed__ = 0;
    duplicatevalues__ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MAGIC_CODE_RESPONSE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 psudoRandomNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &psudorandomnumber_)));
          set_has_psudorandomnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_featureUnlock_;
        break;
      }
      
      // required bool featureUnlock_ = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_featureUnlock_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &featureunlock__)));
          set_has_featureunlock_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_machineUnlock_;
        break;
      }
      
      // required bool machineUnlock_ = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_machineUnlock_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &machineunlock__)));
          set_has_machineunlock_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_magicType_;
        break;
      }
      
      // required int32 magicType_ = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicType_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magictype__)));
          set_has_magictype_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_daysPurchased_;
        break;
      }
      
      // required int32 daysPurchased_ = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daysPurchased_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dayspurchased__)));
          set_has_dayspurchased_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_spindleMaxSpeed_;
        break;
      }
      
      // required int64 spindleMaxSpeed_ = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spindleMaxSpeed_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &spindlemaxspeed__)));
          set_has_spindlemaxspeed_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_maxMemory_;
        break;
      }
      
      // required int32 maxMemory_ = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxMemory_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxmemory__)));
          set_has_maxmemory_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ltSpindleMaxSpeed_;
        break;
      }
      
      // required int32 ltSpindleMaxSpeed_ = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ltSpindleMaxSpeed_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ltspindlemaxspeed__)));
          set_has_ltspindlemaxspeed_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_subSpindleMaxSpeed_;
        break;
      }
      
      // required int32 subSpindleMaxSpeed_ = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subSpindleMaxSpeed_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subspindlemaxspeed__)));
          set_has_subspindlemaxspeed_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_duplicateValues_;
        break;
      }
      
      // required bool duplicateValues_ = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duplicateValues_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &duplicatevalues__)));
          set_has_duplicatevalues_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MAGIC_CODE_RESPONSE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 psudoRandomNumber = 1;
  if (has_psudorandomnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->psudorandomnumber(), output);
  }
  
  // required bool featureUnlock_ = 2;
  if (has_featureunlock_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->featureunlock_(), output);
  }
  
  // required bool machineUnlock_ = 3;
  if (has_machineunlock_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->machineunlock_(), output);
  }
  
  // required int32 magicType_ = 4;
  if (has_magictype_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->magictype_(), output);
  }
  
  // required int32 daysPurchased_ = 5;
  if (has_dayspurchased_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dayspurchased_(), output);
  }
  
  // required int64 spindleMaxSpeed_ = 6;
  if (has_spindlemaxspeed_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->spindlemaxspeed_(), output);
  }
  
  // required int32 maxMemory_ = 7;
  if (has_maxmemory_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->maxmemory_(), output);
  }
  
  // required int32 ltSpindleMaxSpeed_ = 8;
  if (has_ltspindlemaxspeed_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ltspindlemaxspeed_(), output);
  }
  
  // required int32 subSpindleMaxSpeed_ = 9;
  if (has_subspindlemaxspeed_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->subspindlemaxspeed_(), output);
  }
  
  // required bool duplicateValues_ = 10;
  if (has_duplicatevalues_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->duplicatevalues_(), output);
  }
  
}

int MAGIC_CODE_RESPONSE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 psudoRandomNumber = 1;
    if (has_psudorandomnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->psudorandomnumber());
    }
    
    // required bool featureUnlock_ = 2;
    if (has_featureunlock_()) {
      total_size += 1 + 1;
    }
    
    // required bool machineUnlock_ = 3;
    if (has_machineunlock_()) {
      total_size += 1 + 1;
    }
    
    // required int32 magicType_ = 4;
    if (has_magictype_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magictype_());
    }
    
    // required int32 daysPurchased_ = 5;
    if (has_dayspurchased_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dayspurchased_());
    }
    
    // required int64 spindleMaxSpeed_ = 6;
    if (has_spindlemaxspeed_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->spindlemaxspeed_());
    }
    
    // required int32 maxMemory_ = 7;
    if (has_maxmemory_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxmemory_());
    }
    
    // required int32 ltSpindleMaxSpeed_ = 8;
    if (has_ltspindlemaxspeed_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ltspindlemaxspeed_());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 subSpindleMaxSpeed_ = 9;
    if (has_subspindlemaxspeed_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subspindlemaxspeed_());
    }
    
    // required bool duplicateValues_ = 10;
    if (has_duplicatevalues_()) {
      total_size += 1 + 1;
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MAGIC_CODE_RESPONSE::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MAGIC_CODE_RESPONSE*>(&from));
}

void MAGIC_CODE_RESPONSE::MergeFrom(const MAGIC_CODE_RESPONSE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_psudorandomnumber()) {
      set_psudorandomnumber(from.psudorandomnumber());
    }
    if (from.has_featureunlock_()) {
      set_featureunlock_(from.featureunlock_());
    }
    if (from.has_machineunlock_()) {
      set_machineunlock_(from.machineunlock_());
    }
    if (from.has_magictype_()) {
      set_magictype_(from.magictype_());
    }
    if (from.has_dayspurchased_()) {
      set_dayspurchased_(from.dayspurchased_());
    }
    if (from.has_spindlemaxspeed_()) {
      set_spindlemaxspeed_(from.spindlemaxspeed_());
    }
    if (from.has_maxmemory_()) {
      set_maxmemory_(from.maxmemory_());
    }
    if (from.has_ltspindlemaxspeed_()) {
      set_ltspindlemaxspeed_(from.ltspindlemaxspeed_());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_subspindlemaxspeed_()) {
      set_subspindlemaxspeed_(from.subspindlemaxspeed_());
    }
    if (from.has_duplicatevalues_()) {
      set_duplicatevalues_(from.duplicatevalues_());
    }
  }
}

void MAGIC_CODE_RESPONSE::CopyFrom(const MAGIC_CODE_RESPONSE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MAGIC_CODE_RESPONSE::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  
  return true;
}

void MAGIC_CODE_RESPONSE::Swap(MAGIC_CODE_RESPONSE* other) {
  if (other != this) {
    std::swap(psudorandomnumber_, other->psudorandomnumber_);
    std::swap(featureunlock__, other->featureunlock__);
    std::swap(machineunlock__, other->machineunlock__);
    std::swap(magictype__, other->magictype__);
    std::swap(dayspurchased__, other->dayspurchased__);
    std::swap(spindlemaxspeed__, other->spindlemaxspeed__);
    std::swap(maxmemory__, other->maxmemory__);
    std::swap(ltspindlemaxspeed__, other->ltspindlemaxspeed__);
    std::swap(subspindlemaxspeed__, other->subspindlemaxspeed__);
    std::swap(duplicatevalues__, other->duplicatevalues__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MAGIC_CODE_RESPONSE::GetTypeName() const {
  return "MAGIC_CODE_RESPONSE";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
