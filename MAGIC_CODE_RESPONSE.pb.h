// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/MAGIC_CODE_RESPONSE.proto

#ifndef PROTOBUF_proto_2fMAGIC_5fCODE_5fRESPONSE_2eproto__INCLUDED
#define PROTOBUF_proto_2fMAGIC_5fCODE_5fRESPONSE_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2fMAGIC_5fCODE_5fRESPONSE_2eproto();
void protobuf_AssignDesc_proto_2fMAGIC_5fCODE_5fRESPONSE_2eproto();
void protobuf_ShutdownFile_proto_2fMAGIC_5fCODE_5fRESPONSE_2eproto();

class MAGIC_CODE_RESPONSE;

// ===================================================================

class MAGIC_CODE_RESPONSE : public ::google::protobuf::MessageLite {
 public:
  MAGIC_CODE_RESPONSE();
  virtual ~MAGIC_CODE_RESPONSE();
  
  MAGIC_CODE_RESPONSE(const MAGIC_CODE_RESPONSE& from);
  
  inline MAGIC_CODE_RESPONSE& operator=(const MAGIC_CODE_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const MAGIC_CODE_RESPONSE& default_instance();
  
  void Swap(MAGIC_CODE_RESPONSE* other);
  
  // implements Message ----------------------------------------------
  
  MAGIC_CODE_RESPONSE* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MAGIC_CODE_RESPONSE& from);
  void MergeFrom(const MAGIC_CODE_RESPONSE& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 psudoRandomNumber = 1;
  inline bool has_psudorandomnumber() const;
  inline void clear_psudorandomnumber();
  static const int kPsudoRandomNumberFieldNumber = 1;
  inline ::google::protobuf::int64 psudorandomnumber() const;
  inline void set_psudorandomnumber(::google::protobuf::int64 value);
  
  // required bool featureUnlock_ = 2;
  inline bool has_featureunlock_() const;
  inline void clear_featureunlock_();
  static const int kFeatureUnlockFieldNumber = 2;
  inline bool featureunlock_() const;
  inline void set_featureunlock_(bool value);
  
  // required bool machineUnlock_ = 3;
  inline bool has_machineunlock_() const;
  inline void clear_machineunlock_();
  static const int kMachineUnlockFieldNumber = 3;
  inline bool machineunlock_() const;
  inline void set_machineunlock_(bool value);
  
  // required int32 magicType_ = 4;
  inline bool has_magictype_() const;
  inline void clear_magictype_();
  static const int kMagicTypeFieldNumber = 4;
  inline ::google::protobuf::int32 magictype_() const;
  inline void set_magictype_(::google::protobuf::int32 value);
  
  // required int32 daysPurchased_ = 5;
  inline bool has_dayspurchased_() const;
  inline void clear_dayspurchased_();
  static const int kDaysPurchasedFieldNumber = 5;
  inline ::google::protobuf::int32 dayspurchased_() const;
  inline void set_dayspurchased_(::google::protobuf::int32 value);
  
  // required int64 spindleMaxSpeed_ = 6;
  inline bool has_spindlemaxspeed_() const;
  inline void clear_spindlemaxspeed_();
  static const int kSpindleMaxSpeedFieldNumber = 6;
  inline ::google::protobuf::int64 spindlemaxspeed_() const;
  inline void set_spindlemaxspeed_(::google::protobuf::int64 value);
  
  // required int32 maxMemory_ = 7;
  inline bool has_maxmemory_() const;
  inline void clear_maxmemory_();
  static const int kMaxMemoryFieldNumber = 7;
  inline ::google::protobuf::int32 maxmemory_() const;
  inline void set_maxmemory_(::google::protobuf::int32 value);
  
  // required int32 ltSpindleMaxSpeed_ = 8;
  inline bool has_ltspindlemaxspeed_() const;
  inline void clear_ltspindlemaxspeed_();
  static const int kLtSpindleMaxSpeedFieldNumber = 8;
  inline ::google::protobuf::int32 ltspindlemaxspeed_() const;
  inline void set_ltspindlemaxspeed_(::google::protobuf::int32 value);
  
  // required int32 subSpindleMaxSpeed_ = 9;
  inline bool has_subspindlemaxspeed_() const;
  inline void clear_subspindlemaxspeed_();
  static const int kSubSpindleMaxSpeedFieldNumber = 9;
  inline ::google::protobuf::int32 subspindlemaxspeed_() const;
  inline void set_subspindlemaxspeed_(::google::protobuf::int32 value);
  
  // required bool duplicateValues_ = 10;
  inline bool has_duplicatevalues_() const;
  inline void clear_duplicatevalues_();
  static const int kDuplicateValuesFieldNumber = 10;
  inline bool duplicatevalues_() const;
  inline void set_duplicatevalues_(bool value);
  
  // @@protoc_insertion_point(class_scope:MAGIC_CODE_RESPONSE)
 private:
  inline void set_has_psudorandomnumber();
  inline void clear_has_psudorandomnumber();
  inline void set_has_featureunlock_();
  inline void clear_has_featureunlock_();
  inline void set_has_machineunlock_();
  inline void clear_has_machineunlock_();
  inline void set_has_magictype_();
  inline void clear_has_magictype_();
  inline void set_has_dayspurchased_();
  inline void clear_has_dayspurchased_();
  inline void set_has_spindlemaxspeed_();
  inline void clear_has_spindlemaxspeed_();
  inline void set_has_maxmemory_();
  inline void clear_has_maxmemory_();
  inline void set_has_ltspindlemaxspeed_();
  inline void clear_has_ltspindlemaxspeed_();
  inline void set_has_subspindlemaxspeed_();
  inline void clear_has_subspindlemaxspeed_();
  inline void set_has_duplicatevalues_();
  inline void clear_has_duplicatevalues_();
  
  ::google::protobuf::int64 psudorandomnumber_;
  ::google::protobuf::int32 magictype__;
  ::google::protobuf::int32 dayspurchased__;
  bool featureunlock__;
  bool machineunlock__;
  bool duplicatevalues__;
  ::google::protobuf::int32 maxmemory__;
  ::google::protobuf::int64 spindlemaxspeed__;
  ::google::protobuf::int32 ltspindlemaxspeed__;
  ::google::protobuf::int32 subspindlemaxspeed__;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2fMAGIC_5fCODE_5fRESPONSE_2eproto();
  friend void protobuf_AssignDesc_proto_2fMAGIC_5fCODE_5fRESPONSE_2eproto();
  friend void protobuf_ShutdownFile_proto_2fMAGIC_5fCODE_5fRESPONSE_2eproto();
  
  void InitAsDefaultInstance();
  static MAGIC_CODE_RESPONSE* default_instance_;
};
// ===================================================================


// ===================================================================

// MAGIC_CODE_RESPONSE

// required int64 psudoRandomNumber = 1;
inline bool MAGIC_CODE_RESPONSE::has_psudorandomnumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MAGIC_CODE_RESPONSE::set_has_psudorandomnumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MAGIC_CODE_RESPONSE::clear_has_psudorandomnumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MAGIC_CODE_RESPONSE::clear_psudorandomnumber() {
  psudorandomnumber_ = GOOGLE_LONGLONG(0);
  clear_has_psudorandomnumber();
}
inline ::google::protobuf::int64 MAGIC_CODE_RESPONSE::psudorandomnumber() const {
  return psudorandomnumber_;
}
inline void MAGIC_CODE_RESPONSE::set_psudorandomnumber(::google::protobuf::int64 value) {
  set_has_psudorandomnumber();
  psudorandomnumber_ = value;
}

// required bool featureUnlock_ = 2;
inline bool MAGIC_CODE_RESPONSE::has_featureunlock_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MAGIC_CODE_RESPONSE::set_has_featureunlock_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MAGIC_CODE_RESPONSE::clear_has_featureunlock_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MAGIC_CODE_RESPONSE::clear_featureunlock_() {
  featureunlock__ = false;
  clear_has_featureunlock_();
}
inline bool MAGIC_CODE_RESPONSE::featureunlock_() const {
  return featureunlock__;
}
inline void MAGIC_CODE_RESPONSE::set_featureunlock_(bool value) {
  set_has_featureunlock_();
  featureunlock__ = value;
}

// required bool machineUnlock_ = 3;
inline bool MAGIC_CODE_RESPONSE::has_machineunlock_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MAGIC_CODE_RESPONSE::set_has_machineunlock_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MAGIC_CODE_RESPONSE::clear_has_machineunlock_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MAGIC_CODE_RESPONSE::clear_machineunlock_() {
  machineunlock__ = false;
  clear_has_machineunlock_();
}
inline bool MAGIC_CODE_RESPONSE::machineunlock_() const {
  return machineunlock__;
}
inline void MAGIC_CODE_RESPONSE::set_machineunlock_(bool value) {
  set_has_machineunlock_();
  machineunlock__ = value;
}

// required int32 magicType_ = 4;
inline bool MAGIC_CODE_RESPONSE::has_magictype_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MAGIC_CODE_RESPONSE::set_has_magictype_() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MAGIC_CODE_RESPONSE::clear_has_magictype_() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MAGIC_CODE_RESPONSE::clear_magictype_() {
  magictype__ = 0;
  clear_has_magictype_();
}
inline ::google::protobuf::int32 MAGIC_CODE_RESPONSE::magictype_() const {
  return magictype__;
}
inline void MAGIC_CODE_RESPONSE::set_magictype_(::google::protobuf::int32 value) {
  set_has_magictype_();
  magictype__ = value;
}

// required int32 daysPurchased_ = 5;
inline bool MAGIC_CODE_RESPONSE::has_dayspurchased_() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MAGIC_CODE_RESPONSE::set_has_dayspurchased_() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MAGIC_CODE_RESPONSE::clear_has_dayspurchased_() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MAGIC_CODE_RESPONSE::clear_dayspurchased_() {
  dayspurchased__ = 0;
  clear_has_dayspurchased_();
}
inline ::google::protobuf::int32 MAGIC_CODE_RESPONSE::dayspurchased_() const {
  return dayspurchased__;
}
inline void MAGIC_CODE_RESPONSE::set_dayspurchased_(::google::protobuf::int32 value) {
  set_has_dayspurchased_();
  dayspurchased__ = value;
}

// required int64 spindleMaxSpeed_ = 6;
inline bool MAGIC_CODE_RESPONSE::has_spindlemaxspeed_() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MAGIC_CODE_RESPONSE::set_has_spindlemaxspeed_() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MAGIC_CODE_RESPONSE::clear_has_spindlemaxspeed_() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MAGIC_CODE_RESPONSE::clear_spindlemaxspeed_() {
  spindlemaxspeed__ = GOOGLE_LONGLONG(0);
  clear_has_spindlemaxspeed_();
}
inline ::google::protobuf::int64 MAGIC_CODE_RESPONSE::spindlemaxspeed_() const {
  return spindlemaxspeed__;
}
inline void MAGIC_CODE_RESPONSE::set_spindlemaxspeed_(::google::protobuf::int64 value) {
  set_has_spindlemaxspeed_();
  spindlemaxspeed__ = value;
}

// required int32 maxMemory_ = 7;
inline bool MAGIC_CODE_RESPONSE::has_maxmemory_() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MAGIC_CODE_RESPONSE::set_has_maxmemory_() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MAGIC_CODE_RESPONSE::clear_has_maxmemory_() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MAGIC_CODE_RESPONSE::clear_maxmemory_() {
  maxmemory__ = 0;
  clear_has_maxmemory_();
}
inline ::google::protobuf::int32 MAGIC_CODE_RESPONSE::maxmemory_() const {
  return maxmemory__;
}
inline void MAGIC_CODE_RESPONSE::set_maxmemory_(::google::protobuf::int32 value) {
  set_has_maxmemory_();
  maxmemory__ = value;
}

// required int32 ltSpindleMaxSpeed_ = 8;
inline bool MAGIC_CODE_RESPONSE::has_ltspindlemaxspeed_() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MAGIC_CODE_RESPONSE::set_has_ltspindlemaxspeed_() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MAGIC_CODE_RESPONSE::clear_has_ltspindlemaxspeed_() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MAGIC_CODE_RESPONSE::clear_ltspindlemaxspeed_() {
  ltspindlemaxspeed__ = 0;
  clear_has_ltspindlemaxspeed_();
}
inline ::google::protobuf::int32 MAGIC_CODE_RESPONSE::ltspindlemaxspeed_() const {
  return ltspindlemaxspeed__;
}
inline void MAGIC_CODE_RESPONSE::set_ltspindlemaxspeed_(::google::protobuf::int32 value) {
  set_has_ltspindlemaxspeed_();
  ltspindlemaxspeed__ = value;
}

// required int32 subSpindleMaxSpeed_ = 9;
inline bool MAGIC_CODE_RESPONSE::has_subspindlemaxspeed_() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MAGIC_CODE_RESPONSE::set_has_subspindlemaxspeed_() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MAGIC_CODE_RESPONSE::clear_has_subspindlemaxspeed_() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MAGIC_CODE_RESPONSE::clear_subspindlemaxspeed_() {
  subspindlemaxspeed__ = 0;
  clear_has_subspindlemaxspeed_();
}
inline ::google::protobuf::int32 MAGIC_CODE_RESPONSE::subspindlemaxspeed_() const {
  return subspindlemaxspeed__;
}
inline void MAGIC_CODE_RESPONSE::set_subspindlemaxspeed_(::google::protobuf::int32 value) {
  set_has_subspindlemaxspeed_();
  subspindlemaxspeed__ = value;
}

// required bool duplicateValues_ = 10;
inline bool MAGIC_CODE_RESPONSE::has_duplicatevalues_() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MAGIC_CODE_RESPONSE::set_has_duplicatevalues_() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MAGIC_CODE_RESPONSE::clear_has_duplicatevalues_() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MAGIC_CODE_RESPONSE::clear_duplicatevalues_() {
  duplicatevalues__ = false;
  clear_has_duplicatevalues_();
}
inline bool MAGIC_CODE_RESPONSE::duplicatevalues_() const {
  return duplicatevalues__;
}
inline void MAGIC_CODE_RESPONSE::set_duplicatevalues_(bool value) {
  set_has_duplicatevalues_();
  duplicatevalues__ = value;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fMAGIC_5fCODE_5fRESPONSE_2eproto__INCLUDED
