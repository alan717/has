// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CMD_BLOCK.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_CMD_5fBLOCK_2eproto() {
  delete CMD_BLOCK::default_instance_;
}

void protobuf_AddDesc_CMD_5fBLOCK_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_mg_2eproto();
  CMD_BLOCK::default_instance_ = new CMD_BLOCK();
  CMD_BLOCK::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CMD_5fBLOCK_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CMD_5fBLOCK_2eproto {
  StaticDescriptorInitializer_CMD_5fBLOCK_2eproto() {
    protobuf_AddDesc_CMD_5fBLOCK_2eproto();
  }
} static_descriptor_initializer_CMD_5fBLOCK_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int CMD_BLOCK::kSssFieldNumber;
const int CMD_BLOCK::kMmFieldNumber;
#endif  // !_MSC_VER

CMD_BLOCK::CMD_BLOCK()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMD_BLOCK::InitAsDefaultInstance() {
  mm_ = const_cast< ::MAGIC_CODE*>(&::MAGIC_CODE::default_instance());
}

CMD_BLOCK::CMD_BLOCK(const CMD_BLOCK& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMD_BLOCK::SharedCtor() {
  _cached_size_ = 0;
  sss_ = 0;
  mm_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMD_BLOCK::~CMD_BLOCK() {
  SharedDtor();
}

void CMD_BLOCK::SharedDtor() {
  if (this != default_instance_) {
    delete mm_;
  }
}

void CMD_BLOCK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMD_BLOCK& CMD_BLOCK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CMD_5fBLOCK_2eproto();  return *default_instance_;
}

CMD_BLOCK* CMD_BLOCK::default_instance_ = NULL;

CMD_BLOCK* CMD_BLOCK::New() const {
  return new CMD_BLOCK;
}

void CMD_BLOCK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sss_ = 0;
    if (has_mm()) {
      if (mm_ != NULL) mm_->::MAGIC_CODE::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMD_BLOCK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sss = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sss_)));
          set_has_sss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mm;
        break;
      }
      
      // required .MAGIC_CODE mm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMD_BLOCK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sss = 1;
  if (has_sss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sss(), output);
  }
  
  // required .MAGIC_CODE mm = 2;
  if (has_mm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->mm(), output);
  }
  
}

int CMD_BLOCK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sss = 1;
    if (has_sss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sss());
    }
    
    // required .MAGIC_CODE mm = 2;
    if (has_mm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mm());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMD_BLOCK::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMD_BLOCK*>(&from));
}

void CMD_BLOCK::MergeFrom(const CMD_BLOCK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sss()) {
      set_sss(from.sss());
    }
    if (from.has_mm()) {
      mutable_mm()->::MAGIC_CODE::MergeFrom(from.mm());
    }
  }
}

void CMD_BLOCK::CopyFrom(const CMD_BLOCK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD_BLOCK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_mm()) {
    if (!this->mm().IsInitialized()) return false;
  }
  return true;
}

void CMD_BLOCK::Swap(CMD_BLOCK* other) {
  if (other != this) {
    std::swap(sss_, other->sss_);
    std::swap(mm_, other->mm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMD_BLOCK::GetTypeName() const {
  return "CMD_BLOCK";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
